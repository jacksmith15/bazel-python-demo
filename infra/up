#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

> /tmp/out
> /tmp/err

error_handler() {
    exit_code="$?"
    echo -e "\n\nERROR:\n"
    cat /tmp/out
    cat /tmp/err >&2
    exit $exit_code
}

trap "error_handler" ERR

rw="\r\e[0K"


# Find root directory
root="$(git rev-parse --show-toplevel)/infra"
cluster_root="${root}/cluster"

create_cluster() {
    echo "Cluster:"
    echo -n "  creating..."
    ctlptl apply -f "${cluster_root}/cluster.yaml" >> /tmp/out 2>> /tmp/err
    echo -e "${rw}  created ✅"
}


wait_for_pods() {
  echo -n "  waiting for pods to be ready"
  while [ $(kubectl get pods --all-namespaces -o json | jq '.items | map(select(.status.phase=="Running" | not)) | map(select(.status.phase=="Succeeded" | not)) | length') -gt 0 ]
  do
    printf "."
    sleep 1
  done
  echo -e "${rw}  pods are ready ✅"
}

apply_manifests() {
    echo "Manifests:"

    echo -n "  building..."
    kustomize build "${cluster_root}/kustomize" > "${cluster_root}/manifests.yaml" 2>> /tmp/err
    echo -e "${rw}  built ✅"

    echo -n "  validating..."
    kubectl apply -f "${cluster_root}/manifests.yaml" --dry-run=client --validate >> /tmp/out 2>> /tmp/err
    echo -e "${rw}  validated ✅"

    echo -n "  applying..."
    kubectl apply -f "${cluster_root}/manifests.yaml" >> /tmp/out 2>> /tmp/err
    echo -e "${rw}  applied ✅"

    wait_for_pods
}

create_cluster
kubectl config use-context kind-bazel-test-cluster >> /tmp/out 2>> /tmp/err
apply_manifests
